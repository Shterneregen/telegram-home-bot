plugins {
    id "org.springframework.boot" version "$springBootVersion"
    id "io.spring.dependency-management" version "$springDependencyVersion"
    id "java"
    id "org.jetbrains.kotlin.jvm" version "$kotlinVersion"
    id "org.jetbrains.kotlin.plugin.spring" version "$kotlinVersion"
    id "org.jetbrains.kotlin.plugin.jpa" version "$kotlinVersion"
    id "jacoco"
    id "org.sonarqube" version "$sonarqubeVersion"
}

jacoco {
    toolVersion = "$jacocoVersion"
}

sourceSets {
    main.kotlin.srcDirs += "src/main/java"
}

group = "random"
version = "0.0.1-SNAPSHOT"

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    ktlint
}

repositories {
    mavenCentral()
}

dependencies {
    implementation(
            "org.springframework.boot:spring-boot-starter-actuator",
            "org.springframework.boot:spring-boot-starter-web",
            "org.springframework.boot:spring-boot-starter-data-jpa",
            "org.springframework.boot:spring-boot-starter-thymeleaf",
            "org.springframework.boot:spring-boot-starter-security",
            "org.springframework.boot:spring-boot-starter-validation"
    )
    implementation(
            "nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect",
            "org.thymeleaf.extras:thymeleaf-extras-springsecurity5:$thymeleafExtrasSpringsecurity5Version",
            "org.telegram:telegrambots-spring-boot-starter:$telegrambotsSpringBootStarterVersion",
            "com.opencsv:opencsv:$opencsvVersion",
            "org.apache.commons:commons-lang3:$commonsLang3Version",
            "com.kcthota:emoji4j:$emoji4jVersion",
            "org.passay:passay:$passayVersion"
    )
    implementation(
            "org.webjars:webjars-locator:$webjarsLocatorVersion",
            "org.webjars:jquery:$jqueryVersion",
            "org.webjars:bootstrap:$bootstrapVersion",
            "org.webjars:font-awesome:$fontAwesomeVersion",
            "org.webjars:popper.js:$popperJsVersion"
    )
    developmentOnly "org.springframework.boot:spring-boot-devtools"
    runtimeOnly "com.h2database:h2"
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    testImplementation(
            "org.springframework.boot:spring-boot-starter-test",
            "org.springframework.security:spring-security-test"
    )

    runtimeOnly "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    implementation(
            "org.jetbrains.kotlin:kotlin-stdlib-jdk8",
            "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinxCoroutinesCoreVersion",
            "com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonModuleKotlinVersion"
    )

    ktlint("com.pinterest:ktlint:$ktlintVersion") {
        attributes {
            attribute(Bundling.BUNDLING_ATTRIBUTE, getObjects().named(Bundling, Bundling.EXTERNAL))
        }
    }
}

test {
    useJUnitPlatform()
}

bootJar {
    archiveFileName = "thb.jar"
    launchScript()
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "11"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "11"
    }
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.pinterest.ktlint.Main"
    args "src/**/*.kt"
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    main = "com.pinterest.ktlint.Main"
    args "-F", "src/**/*.kt"
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
        csv.enabled false
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "thb"
        property "sonar.host.url", "http://127.0.0.1:9000"
        // property "sonar.login", ""
    }
}
